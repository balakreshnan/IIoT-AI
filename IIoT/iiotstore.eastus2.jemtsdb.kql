// Create table command
////////////////////////////////////////////////////////////
.create table ['iotcentraltelemetry']  (['humidity']:real, ['temperature']:real, ['pressure']:real, ['magnetometer_x']:int, ['magnetometer_y']:int, ['magnetometer_z']:int, ['gyroscope_x']:int, ['gyroscope_y']:int, ['gyroscope_z']:int, ['accelerometer_x']:int, ['accelerometer_y']:int, ['accelerometer_z']:int, ['EventProcessedUtcTime']:datetime, ['PartitionId']:int, ['EventEnqueuedUtcTime']:datetime, ['enqueuedTime']:datetime, ['EnqueuedTimeUtc']:datetime)

// Create mapping command
////////////////////////////////////////////////////////////
.create table ['iotcentraltelemetry'] ingestion json mapping 'iotcentraltelemetry_mapping' '[{"column":"humidity","path":"$.humidity","datatype":"real"},{"column":"temperature","path":"$.temperature","datatype":"real"},{"column":"pressure","path":"$.pressure","datatype":"real"},{"column":"magnetometer_x","path":"$.magnetometer.x","datatype":"int"},{"column":"magnetometer_y","path":"$.magnetometer.y","datatype":"int"},{"column":"magnetometer_z","path":"$.magnetometer.z","datatype":"int"},{"column":"gyroscope_x","path":"$.gyroscope.x","datatype":"int"},{"column":"gyroscope_y","path":"$.gyroscope.y","datatype":"int"},{"column":"gyroscope_z","path":"$.gyroscope.z","datatype":"int"},{"column":"accelerometer_x","path":"$.accelerometer.x","datatype":"int"},{"column":"accelerometer_y","path":"$.accelerometer.y","datatype":"int"},{"column":"accelerometer_z","path":"$.accelerometer.z","datatype":"int"},{"column":"EventProcessedUtcTime","path":"$.EventProcessedUtcTime","datatype":"datetime"},{"column":"PartitionId","path":"$.PartitionId","datatype":"int"},{"column":"EventEnqueuedUtcTime","path":"$.EventEnqueuedUtcTime","datatype":"datetime"},{"column":"enqueuedTime","path":"$.enqueuedTime","datatype":"datetime"},{"column":"EnqueuedTimeUtc","path":"$.EnqueuedTimeUtc","datatype":"datetime"}]'


iotcentraltelemetry
| count  

iotcentraltelemetry
| limit 200 | extend ingestionTime = ingestion_time()


iotcentraltelemetry 
| extend ingestionTime = ingestion_time()
| project humidity, temperature, pressure, magnetometer_x, magnetometer_y,
magnetometer_z, gyroscope_x, gyroscope_y, gyroscope_z, 
accelerometer_x, accelerometer_y,accelerometer_z, ingestionTime
| render linechart  with  (ycolumns = humidity, pressure, magnetometer_x, magnetometer_y,
magnetometer_z, gyroscope_x, gyroscope_y, gyroscope_z, 
accelerometer_x, accelerometer_y,accelerometer_z, series = ingestionTime)


iotcentraltelemetry
| extend ingestionTime = ingestion_time()
| summarize avgHumidity=avg(humidity), avgTemperature=avg(temperature) ,
avgPressure=avg(pressure) , avgaccx=avg(accelerometer_x) ,
avgaccy=avg(accelerometer_y) ,avgaccz=avg(accelerometer_z)  
by bin(ingestionTime, 15m) 
| render timechart


iotcentraltelemetry
| extend ingestionTime = ingestion_time()
| summarize avgHumidity=avg(humidity), avgTemperature=avg(temperature) ,
avgPressure=avg(pressure)   
by bin(ingestionTime, 1m) 
| render timechart

iotcentraltelemetry
| extend ingestionTime = ingestion_time()
| summarize avgHumidity=avg(humidity), avgTemperature=avg(temperature)
by bin(ingestionTime, 1m) 
| render timechart


iotcentraltelemetry
| extend ingestionTime = ingestion_time()
| summarize avgHumidity=avg(humidity), avgTemperature=avg(temperature) ,
avgPressure=avg(pressure)   
by bin(ingestionTime, 1m) 
| render timechart


.alter table iotcentraltelemetry (inserttime:datetime) 


iotcentraltelemetry
| extend ingesttime = ingestion_time()
| project ingesttime,humidity,temperature,pressure, accelerometer_x,accelerometer_y,accelerometer_z
| summarize avgHumidity=avg(humidity) ,avgPressure=avg(pressure), avgTemperature=avg(temperature)
by bin(ingesttime, 1m)
| render timechart 

iotcentraltelemetry
| extend ingesttime = ingestion_time()
| project ingesttime,humidity,temperature,pressure, accelerometer_x,accelerometer_y,accelerometer_z
| summarize avgHumidity=avg(humidity) ,avgTemperature=avg(temperature)
by bin(ingesttime, 1m)
| render timechart 

iotcentraltelemetry
| extend ingesttime = ingestion_time()
| project ingesttime,humidity,temperature,pressure, accelerometer_x,accelerometer_y,accelerometer_z
| summarize avgHumidity=avg(humidity) ,avgTemperature=avg(temperature)
by bin(ingesttime, 15m)
| render timechart 

iotcentraltelemetry
| extend ingesttime = ingestion_time()
| project ingesttime,humidity,temperature,pressure, accelerometer_x,accelerometer_y,accelerometer_z
| summarize avgHumidity=avg(humidity) ,avgTemperature=avg(temperature)
by bin(ingesttime, 1h)
| render timechart 


iotcentraltelemetry
| extend ingesttime = ingestion_time()
| project ingesttime,humidity,temperature,pressure, accelerometer_x,accelerometer_y,accelerometer_z
| summarize avgHumidity=avg(humidity) ,avgTemperature=avg(temperature)
by bin(ingesttime, 1d)
| render timechart 

let min_t = datetime(2020-03-18);
let max_t = datetime(2020-03-19 22:00);
let dt = 1h;
iotcentraltelemetry
| extend ingesttime = ingestion_time() 
| make-series temperature=avg(temperature) on ingesttime from min_t to max_t step dt
| extend (anomalies, score, baseline) = series_decompose_anomalies(temperature, 1.5, -1, 'linefit')
| render anomalychart with(anomalycolumns=anomalies, title='Temp, anomalies') 

let min_t = datetime(2020-03-18);
let max_t = datetime(2020-03-19 22:00);
let dt = 1h;
let horizon=7d;
iotcentraltelemetry
| extend ingesttime = ingestion_time() 
| make-series temperature=avg(temperature) on ingesttime from min_t to max_t step dt
| extend forecast = series_decompose_forecast(temperature, toint(horizon/dt))
| render timechart with(title='Temp, forecasting the next week by Time Series Decomposition')

let min_t = toscalar(iotcentraltelemetry | extend ingesttime = ingestion_time()  | summarize min(ingesttime));  
let max_t = toscalar(iotcentraltelemetry  | extend ingesttime = ingestion_time() | summarize max(ingesttime));  
iotcentraltelemetry
| extend ingesttime = ingestion_time() 
| make-series num=count() on ingesttime from min_t to max_t step 10m
| render timechart with(title="Temperature over a week, 10 minutes resolution")

let min_t=datetime(2020-03-18);
iotcentraltelemetry
| extend ingesttime = ingestion_time() 
| make-series num=count() on ingesttime from min_t to min_t+24h step 1m
| render timechart with(title="Zoom on the 2nd spike, 1 minute resolution")


let min_peak_t=datetime(2020-03-18);
let max_peak_t=datetime(2020-03-19 22:00);
iotcentraltelemetry
| extend ingesttime = ingestion_time() 
| where ingesttime between(min_peak_t..max_peak_t)
| evaluate autocluster()

let min_peak_t=datetime(2020-03-18);
let max_peak_t=datetime(2020-03-19 22:00);
iotcentraltelemetry
| extend ingesttime = ingestion_time() 
| where ingesttime between(min_peak_t..max_peak_t)
| evaluate basket()
